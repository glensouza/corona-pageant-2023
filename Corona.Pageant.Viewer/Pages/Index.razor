@page "/"
@inject HttpClient Http
@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.Json
@using System.Timers
@using Corona.Pageant.Shared
@inject IConfiguration Configuration
@implements IAsyncDisposable

<div id="pageantMain">
    <h1>Passion and Resurrection Pageant</h1>
    <div id="theScript">
        @foreach (Scripts tempScript in this.displayScript)
        {
            <div id="@(tempScript.Act.Replace(" ", ""))_@(tempScript.Scene.Replace(" ", ""))" class="@tempScript.NavClass">
                <div class="row mb-3">
                    <div class="col-md-8 themed-grid-col" style="white-space: pre-line">
                        <h2 class="mt-4">Act @tempScript.Act<br />Scene @tempScript.Scene</h2>
                        @tempScript.Text
                    </div>
                    <div class="col-md-4 themed-grid-col">
                        @if (string.IsNullOrEmpty(tempScript.NavClass))
                        {
                            <div class="display-1">@TimeSpan.FromSeconds(tempScript.SceneLength).ToString(@"mm\:ss")</div>
                        }
                        else
                        {
                            <div class="display-1">@(this.Time)</div>
                        }
                        <table class="table table-striped table-bordered table-hover table-sm">
                            <tr><th>Lighting</th><th>Action</th></tr>
                            <tr><td>Spotlight Left</td><td>@tempScript.SpotlightLeft</td></tr>
                            <tr><td>Spotlight Right</td><td>@tempScript.SpotlightRight</td></tr>
                            <tr><td>Stage Scene</td><td>@tempScript.StageLightScene</td></tr>
                            <tr><td>House Lights</td><td>@tempScript.HouseLights</td></tr>
                        </table>
                        <p>@tempScript.LightingNotes</p>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private HubConnection? hubConnection;
    private string apiLocation = string.Empty;
    private List<Scripts> script = new();
    private readonly List<Scripts> displayScript = new();

    private Timer aTimer = new();
    private int counter = 60;

    private string Time { get; set; } = "00:00";

    protected override async Task OnInitializedAsync()
    {

        this.apiLocation = this.Configuration["apiLocation"] ?? throw new InvalidOperationException();

        this.script = await this.Http.GetFromJsonAsync<List<Scripts>>($"{this.apiLocation}/api/script") ?? new List<Scripts>();

        this.hubConnection = new HubConnectionBuilder()
            .WithUrl($"{this.apiLocation}/api/pageantHub")
            .WithAutomaticReconnect()
            .Build();

        this.hubConnection.On<string>("Navigate", (message) =>
        {
            try
            {
                Navigate? nav = JsonSerializer.Deserialize<Navigate>(message);
                foreach (Scripts scriptWithNav in this.script.Where(s => !string.IsNullOrEmpty(s.NavClass)))
                {
                    scriptWithNav.NavClass = string.Empty;
                }

                int indexOfMessage = this.script.FindIndex(s => s.Act == nav?.Act && s.Scene == nav.Scene);
                if (indexOfMessage > -1)
                {
                    this.counter = this.script[indexOfMessage].SceneLength;
                    this.StartTimer();

                    this.script[indexOfMessage].NavClass = "navCurrent";
                    this.displayScript.Clear();
                    this.displayScript.Add(this.script[indexOfMessage]);
                    if (indexOfMessage + 1 < this.script.Count)
                    {
                        this.displayScript.Add(this.script[indexOfMessage + 1]);
                    }
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }

            this.StateHasChanged();
        });

        await this.hubConnection.StartAsync();
    }

    private void StartTimer()
    {
        if (this.aTimer.Enabled)
        {
            return;
        }

        this.aTimer = new Timer(1000);
        this.aTimer.Elapsed += this.CountDownTimer;
        this.aTimer.Enabled = true;
    }

    private void CountDownTimer(object? source, ElapsedEventArgs e)
    {
        if (this.counter > 0)
        {
            this.counter -= 1;
        }
        else
        {
            this.aTimer.Enabled = false;
        }

        this.Time = TimeSpan.FromSeconds(this.counter).ToString(@"mm\:ss");
        this.InvokeAsync(this.StateHasChanged);
    }

    public async ValueTask DisposeAsync()
    {
        if (this.hubConnection is not null)
        {
            await this.hubConnection.DisposeAsync();
        }

        this.aTimer.Dispose();
    }
}
